// === üß† Application Layer: Staff Use Case ===
// üìñ ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Staff - orchestrates ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á layers
//
// üéØ SOLID Principles ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ:
//
// 1Ô∏è‚É£ Single Responsibility Principle (SRP):
//    StaffUsecase ‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ business logic ‡∏Ç‡∏≠‡∏á Staff
//
// 2Ô∏è‚É£ Open/Closed Principle (OCP):
//    ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° use case ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç interface ‡∏´‡∏£‡∏∑‡∏≠ repository
//
// 3Ô∏è‚É£ Liskov Substitution Principle (LSP):
//    StaffUsecase ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö interface abstractions ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
//
// 4Ô∏è‚É£ Interface Segregation Principle (ISP):
//    ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ method ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å ItemsRepository ‡πÅ‡∏•‡∏∞ TimerHelper
//
// 5Ô∏è‚É£ Dependency Inversion Principle (DIP):
//    ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö abstractions: SharedItemsRepository ‡πÅ‡∏•‡∏∞ IntoTimerHelperShared
//    ‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö concrete implementations

use std::sync::Arc;

use crate::{
    models::{
        error::{APIError, IntoErrorResponse},  // üìã Error handling models
        item::{Item, StaffAdding},             // üìã API models
    },
    repositories::items::SharedItemsRepository, // üíæ Repository interface
    time_helper::IntoTimerHelperShared,        // ‚è∞ Time utility
};

// üì¶ StaffUsecase struct: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ business logic ‡∏Ç‡∏≠‡∏á Staff
pub struct StaffUsecase {
    items_repository: SharedItemsRepository,   // üíæ Dependency: Repository ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    timer_helper: IntoTimerHelperShared,       // ‚è∞ Dependency: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤
}

impl StaffUsecase {
    // üèóÔ∏è Factory method: ‡∏™‡∏£‡πâ‡∏≤‡∏á StaffUsecase ‡∏û‡∏£‡πâ‡∏≠‡∏° dependencies
    pub fn creation(
        items_repository: SharedItemsRepository,   // üíæ Repository dependency
        timer_helper: IntoTimerHelperShared,       // ‚è∞ Timer dependency
    ) -> Arc<Self> {
        Arc::new(Self {
            items_repository,
            timer_helper,
        })
    }

    // ‚ûï Business Logic: ‡πÄ‡∏û‡∏¥‡πà‡∏° Staff ‡πÉ‡∏´‡∏°‡πà
    // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ç‡∏≠‡∏á Use Case - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ business rules ‡πÅ‡∏•‡∏∞ flow
    pub async fn adding(&self, staff: StaffAdding) -> Result<Item, Box<dyn IntoErrorResponse>> {
        // üîç ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Staff ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (Business Rule)
        if let Ok(_) = self.items_repository.find_by_name(staff.name.clone()).await {
            return Err(Box::new(APIError::ItemAlreadyExists(staff.name.clone())));
        };

        // ‚ûï ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÅ‡∏õ‡∏•‡∏á Model ‡πÄ‡∏õ‡πá Entity ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

        // üîÑ ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°: ‡∏™‡∏£‡πâ‡∏≤‡∏á Entity ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏ï‡∏≤‡∏° Clean Architecture flow)
        // let id = match self
        //     .items_repository
        //     .insert(ItemsEntity::new(                    // üèóÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Entity ‡πÉ‡∏´‡∏°‡πà
        //         staff.name.clone(),
        //         Category::Staff.to_string(),             // üè∑Ô∏è ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏õ‡πá‡∏ô Staff
        //         Arc::clone(&self.timer_helper),          // ‚è∞ ‡πÉ‡∏ä‡πâ timer helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö timestamp
        //     ))
        //     .await

        // ‚úÖ ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà: ‡πÉ‡∏ä‡πâ Model ‚Üí Entity ‚Üí Database flow ‡∏ï‡∏≤‡∏° Clean Architecture
        let id = match self
            .items_repository
            .insert(staff.to_entity(Arc::clone(&self.timer_helper))) // üîÑ ‡πÉ‡∏ä‡πâ to_entity() ‡πÅ‡∏õ‡∏•‡∏á Model ‚Üí Entity
            .await
        {
            Ok(id) => id,                                // ‚úÖ ‡πÑ‡∏î‡πâ ID ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            Err(e) => return Err(Box::new(APIError::AddingItemError(e))), // ‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        };

        // üîç ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        let staff_entity = match self.items_repository.find_by_id(id).await {
            Ok(r) => r,                                  // ‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            Err(_) => return Err(Box::new(APIError::ItemNotFound(id))), // ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
        };

        // üîÑ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡πÅ‡∏õ‡∏•‡∏á Entity ‡πÄ‡∏õ‡πá‡∏ô Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API response
        Ok(match staff_entity.to_model(){
            Ok(r) => r,                                  // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            Err(e) => return Err(e),                     // ‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á
        })
    }
}
