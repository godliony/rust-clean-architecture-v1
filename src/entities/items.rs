// === üèõÔ∏è Domain Layer: Items Entity ===
// üìñ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Entity ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
//
// üéØ SOLID Principles ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ:
//
// 1Ô∏è‚É£ Single Responsibility Principle (SRP):
//    Items entity ‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Item
//
// 2Ô∏è‚É£ Open/Closed Principle (OCP):
//    ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° method ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç struct ‡πÄ‡∏î‡∏¥‡∏°
//    ‡πÄ‡∏û‡∏¥‡πà‡∏° category ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ô get_category() ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç logic ‡πÄ‡∏î‡∏¥‡∏°
//
// 3Ô∏è‚É£ Liskov Substitution Principle (LSP):
//    Items entity ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ domain object ‡πÑ‡∏î‡πâ
//
// 4Ô∏è‚É£ Interface Segregation Principle (ISP):
//    ‡πÅ‡∏ï‡πà‡∏•‡∏∞ method ‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ method ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
//
// 5Ô∏è‚É£ Dependency Inversion Principle (DIP):
//    ‡πÉ‡∏ä‡πâ IntoTimerHelperShared abstraction ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

use chrono::NaiveDateTime;

use crate::{
    models::{
        error::{APIError, IntoErrorResponse},
        item::{Category, Item as ItemModel},
    },
    time_helper::IntoTimerHelperShared,
};

// üì¶ Items struct: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Item ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
// - derive Debug: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ debug ‡πÅ‡∏•‡∏∞ print
// - derive Clone: ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ copy ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
// - derive sqlx::FromRow: ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô struct
// - derive PartialEq: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
#[derive(Debug, Clone, sqlx::FromRow, PartialEq)]
pub struct Items{
    pub id: Option<i32>,           // üÜî Primary key (None ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà)
    pub name: String,              // üìù ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á item
    pub category: String,          // üè∑Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á item (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô String)
    pub created_at: NaiveDateTime, // üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
    pub updated_at: NaiveDateTime, // üîÑ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
}

impl Items {
    // üèóÔ∏è Constructor: ‡∏™‡∏£‡πâ‡∏≤‡∏á Items ‡πÉ‡∏´‡∏°‡πà
    // ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå t ‡πÄ‡∏õ‡πá‡∏ô dependency injection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤
    pub fn new(name: String, category: String, t: IntoTimerHelperShared) -> Self{
        Self{
            id: None,                    // üÜî ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ID (‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å insert)
            name,                        // üìù ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
            category,                    // üè∑Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
            created_at: t.now(),         // üìÖ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å timer helper
            updated_at: t.now(),         // üîÑ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å timer helper
        }
    }

    // üîÑ ‡πÅ‡∏õ‡∏•‡∏á Entity ‡πÄ‡∏õ‡πá‡∏ô Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô API
    // Entity (Domain) -> Model (API Response)
    pub fn to_model(&self) -> Result<ItemModel, Box<dyn IntoErrorResponse>>{
        // üîç ‡πÅ‡∏õ‡∏•‡∏á String category ‡πÄ‡∏õ‡πá‡∏ô Category enum
        let category = match self.get_category(){
            Some(category) => category,
            None => {
                // ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏™‡πà‡∏á error ‡∏Å‡∏•‡∏±‡∏ö
                return Err(Box::new(APIError::InvalidCategory(self.category.clone())));
            }
        };

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á ItemModel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API response
        Ok(ItemModel {
            id: self.id.unwrap(),        // üÜî ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ID (unwrap ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å to_model ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏°‡∏µ ID ‡πÅ‡∏•‡πâ‡∏ß)
            name: self.name.to_string(), // üìù ‡∏ä‡∏∑‡πà‡∏≠
            category,                    // üè∑Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
        })
    }

    // üè∑Ô∏è ‡πÅ‡∏õ‡∏•‡∏á String category ‡πÄ‡∏õ‡πá‡∏ô Category enum
    // ‡πÄ‡∏õ‡πá‡∏ô business logic ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    pub fn get_category(&self) -> Option<Category>{
        match self.category.as_str(){
            "Staff" => Some(Category::Staff),  // ü™Ñ ‡πÑ‡∏°‡πâ‡πÄ‡∏ó‡πâ‡∏≤‡∏ß‡∏¥‡πÄ‡∏®‡∏©
            "Sword" => Some(Category::Sword),  // ‚öîÔ∏è ‡∏î‡∏≤‡∏ö
            _ => None,                         // ‚ùì ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
        }
    }
}